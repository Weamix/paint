#include <stdio.h>
#include <stdlib.h>


typedef struct _droite   // On met un souligné car ce type ne servira qu'en interne !!
    {

        int coeffDir;

        int ordOrigine;

        struct _droite *suivant; // Chaine de liaison pour le suivant.

    }tdroite, *ptdroite; // "t" pour le type "pt" pour le type pointeur.

/**

Fonction permettant de réaliser une droite en passant le coeffDir et ordOrigine en paramètres.
Par defaut, la droite ne connait pas le suivant donc on la met a NULL. Le type de retour est ptdroite (un pointeur sur une droite) !

*/

ptdroite creation_droite(int d1, int d2)
{

    ptdroite nouveau;

    nouveau=malloc(sizeof(tdroite));  // On crée la structure d'une nouvelle droite.

    nouveau->coeffDir=d1;

    nouveau->ordOrigine=d2;  // On remplit la droite !

    nouveau->suivant=NULL;  // Rien derriére la droite !

    return nouveau;

}

/**

Cette fonction permet d'inserer une droite dans une liste_de_droite. La liste_de_droite est de type ptdroite et le passage par adresse de ce parametre
permet de conserve les changements qu'il subit (ajout d'une nouvelle droite). Le second parametre est la droite qu'on desire inserer.
Il faut noter ici qu'on fait une insersion en queue de liste, c-à-d qu'on cherche la dernière droite d'une liste_de_droite et on insere la nouvelle droite.

*/

void insertion(ptdroite *liste_de_droite, ptdroite droite)
{
    // Si la liste_de_droite ne contient aucune droite !
    if (*liste_de_droite == NULL)
        {
            *liste_de_droite = droite;
        }else // La liste_de_droite contient au moins une droite.
            {
                ptdroite derniere_droite = *liste_de_droite;
                while (derniere_droite->suivant != NULL)
                    {
                        derniere_droite = derniere_droite->suivant;
                    }
                derniere_droite->suivant = droite;
            }
}

/**

Procedure permettant d'afficher les droites de la liste_de_droite passant en paramètre.

*/

void afficherListe(ptdroite liste_de_droite)
{
    ptdroite droite = liste_de_droite;

    int i = 1;

    while (droite != NULL)
        {
            printf("Droite %d avec coeffDir = %d et ordOrigine = %d \n", i, droite->coeffDir, droite->ordOrigine);

            droite = droite->suivant;

            i++;
        }
}

int main()
{

    ptdroite liste_de_droite = NULL; // Par defaut la liste ne contient aucune droite

    char rep = 'o';

    int d1, d2;


    while (rep == 'o')
    {
        printf("-------- creation d'une nouvelle droite -----------\n");
        printf("coeffDir = ");
        scanf("%d", &d1);
        printf("ordOrigine = ");
        scanf("%d", &d2);

        ptdroite nouvelle_droite = creation_droite(d1, d2);

        printf("La droite vient est fait \n");

        insertion(&liste_de_droite, nouvelle_droite); // Passage par adresse pour la droite

        printf(" Voulez vous ajouter une nouvelle droite ? o/n : ");
        scanf(" %c", &rep);
    }

    printf("Affichage des droites de la liste \n");

    afficherListe(liste_de_droite);
    return 0;
}
